#!/usr/bin/env bash
# Written by Visorak and 88lex
# Usage: ./sarotate ; ./sarotate -c config.yml

source library

usage()
{
    echo "usage: ./sarotate options: [-c]"
    echo "Example: ./sarotate -c conf.yml"
}

optChoose() {
while getopts ':c:' choice
do
    case "${choice}" in
      c) cf=$OPTARG ;;
     \?) echo "Invalid option: -${OPTARG}" 1>&2; usage; exit 1 ;;
      *) usage; exit 1 ;;
  esac
done
shift $((OPTIND -1))
args="$@"
}

optConfCheck() {
if [ -z "$cf" ]; then 
  log_error "SARotate needs a configuration file."
    usage
     exit 1
fi
}

mainInit () {
COUNT="$(yyq r "$st" "$cf" global.minjs)"
MOD=$(( "$(yyq r "$st" "$cf" global.maxjs)" - "$(yyq r "$st" "$cf" global.minjs)" + 1 ))
unset $notif_key
unset $notif
if [[ "$(yyq r "$st" "$cf" log.notif)" = "key" ]]; then 
  notif_key=" tee >($(yyq r "$st" "$cf" log.notif_cmd))"
fi
if [[ "$(yyq r "$st" "$cf" log.notif)" = "all" ]]; then 
  notif=" tee >($(yyq r "$st" "$cf" log.notif_cmd))" && notif_key="$notif"
fi
if [ ! -d "$(yyq r "$st" "$cf" log.log_dir)" ]; then 
  mkdir -p "$(yyq r "$st" "$cf" log.log_dir)"
fi
if [ ! -f "$(yyq r "$st" "$cf" log.log_file)" ]; then 
  touch "$(yyq r "$st" "$cf" log.log_file)"
fi
if [[ -f "$(yyq r "$st" "$cf" log.log_file)" ]]; then 
  tail -n 50 "$(yyq r "$st" "$cf" log.log_file)" > tmp
  mv tmp "$(yyq r "$st" "$cf" log.log_file)"
fi;
}

arrayCombine() {
readarray -t arrayRemote < <(yyq r "$st" "$cf" main.remote | sed -E 's/- +\ ?//g')
readarray -t arrayPort < <(yyq r "$st" "$cf" main.port | sed -E 's/- +\ ?//g')
}

mainRotate () {
echo "**********************************************"
echo "**                                          **"
echo "**          SARotate Version 2.2            **"
echo "**                                          **"
echo "**       Written by Lex and Visorak         **"
echo "**   https://github.com/Visorask/sarotate   **"
echo "**                                          **"
echo "**********************************************"
log_info "SA Rotate is now initializing these mounts, starting with $(yyq r "$st" "$cf" global.json_dir)/$COUNT.json with an increment of $(yyq r "$st" "$cf" global.nextjs)." |& eval tee "$notif_key" | tee -a "$(yyq r "$st" "$cf" log.log_file)"
while : ;do
  jin=0
  while [ $jin -lt ${#arrayRemote[*]} ]; do
    log_info "Switching remote ${arrayRemote[$jin]%:*} to use service account $COUNT.json for $(yyq r "$st" "$cf" global.sleeptime)" |& eval tee "$notif" | tee -a "$(yyq r "$st" "$cf" log.log_file)"
      rclone rc --rc-user="$(yyq r "$st" "$cf" rclone.rc_user)" --rc-pass="$(yyq r "$st" "$cf" rclone.rc_pass)" --rc-addr "$(yyq r "$st" "$cf" rclone.ip)":"${arrayPort[$jin]}" backend/command command=set fs="${arrayRemote[$jin]%:*}": -o \
      service_account_file="$(yyq r "$st" "$cf" global.json_dir)"/"$COUNT".json --config="$(yyq r "$st" "$cf" rclone.rclone_config)" --log-level=ERROR |& eval tee "$notif_key" | tee -a "$(yyq r "$st" "$cf" log.log_file)"
      COUNT=$(( ((COUNT - "$(yyq r "$st" "$cf" global.minjs)" + "$(yyq r "$st" "$cf" global.nextjs)") % MOD) + "$(yyq r "$st" "$cf" global.minjs)" ))
  jin=$(( jin + 1 ));
  done
log_info "SARotate will now go idle for $(yyq r "$st" "$cf" global.sleeptime)." | tee -a "$(yyq r "$st" "$cf" log.log_file)"
sleep "$(yyq r "$st" "$cf" global.sleeptime)"
done;
}

yyqDetect
optChoose "$@"
optConfCheck
mainInit
arrayCombine
mainRotate
